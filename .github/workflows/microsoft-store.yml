name: Microsoft Store Build

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: ["main"]

jobs:
  build:
    strategy:
      matrix:
        channel: [StoreUpload]
        targetPlatform: [x64]
        include:
          - channel: StoreUpload
            ChannelName: StoreUpload
            Configuration: Release
            DistributionUrl: https://github.com/FancyWM/fancywm
            MsixPackageId: 2203VeselinKaraganev.FancyWM
            MsixPublisherId: CN=18A4315F-5918-494C-B473-035F554CB857
            MsixPackageDisplayName: FancyWM

    runs-on: windows-latest

    env:
      App_Packages_Bundle: FancyWM.${{ matrix.ChannelName }}.${{ matrix.targetplatform }}.msixbundle
      App_Packages_Directory: AppPackages
      SigningCertificate: FancyWMGithubActions.pfx
      Solution_Path: FancyWM.sln
      Test_Project_Path: FancyWM.Tests\FancyWM.Tests.csproj
      Wpf_Project_Path: FancyWM\FancyWM.csproj
      Wap_Project_Directory: FancyWM.Package
      Wap_Project_Name: FancyWM.Package.wapproj
      Actions_Allow_Unsecure_Commands: true # Allows AddPAth and SetEnv commands

    steps:
      # Install the .NET workload
      - name: Install .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Setup Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.11
        with:
          sdk-version: 18362

      # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.1

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Use Nerdbank.GitVersioning to set version variables
        uses: dotnet/nbgv@master
        id: nbgv

      # Update the appxmanifest before build by setting the per-channel values set in the matrix such as
      # the Package.Identity.Version or the Package.Identity.Name, which allows multiple channels to be built.
      - name: Update manifest version
        run: |
          [xml]$manifest = get-content ".\$env:Wap_Project_Directory\Package.appxmanifest"
          $manifest.Package.Identity.Version = "${{ steps.nbgv.outputs.SimpleVersion }}.0"
          $manifest.Package.Identity.Name = "${{ matrix.MsixPackageId }}"
          $manifest.Package.Identity.Publisher = "${{ matrix.MsixPublisherId }}"
          $manifest.Package.Properties.DisplayName = "${{ matrix.MsixPackageDisplayName }}"
          $manifest.Package.Applications.Application.VisualElements.DisplayName = "${{ matrix.MsixPackageDisplayName }}"
          $manifest.save(".\$env:Wap_Project_Directory\Package.appxmanifest")

      # Decode the Base64 encoded Pfx
      - name: Decode the Pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $currentDirectory = Get-Location
          $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:Wap_Project_Directory -AdditionalChildPath $env:SigningCertificate
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      # Restore the application
      - name: Restore the Wpf application to populate the obj folder
        run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
        env:
          Configuration: ${{ matrix.Configuration }}
          RuntimeIdentifier: win-${{ matrix.targetplatform }}

      # Execute all unit tests in the solution
      # - name: Execute unit tests
      #   run: dotnet test

      # Build the Windows Application Packaging project for StoreUpload
      - name: Build the Windows Application Packaging Project (wapproj) for ${{ matrix.ChannelName }}
        run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundlePlatforms="${{ matrix.targetplatform }}" /p:AppxBundle=$env:AppxBundle /p:GenerateAppInstallerFile=$env:GenerateAppInstallerFile /p:AppxPackageSigningEnabled=$env:AppxPackageSigningEnabled /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
        env:
          AppxBundle: Always
          AppxPackageSigningEnabled: True
          BuildMode: StoreUpload
          Configuration: ${{ matrix.Configuration }}
          GenerateAppInstallerFile: False
          TargetPlatform: ${{ matrix.targetplatform }}

      # Remove the .pfx
      - name: Remove the .pfx
        run: Remove-Item -path $env:Wap_Project_Directory\$env:SigningCertificate

      # Archive the package
      - name: Create archive
        run: |
          $BundlePath = (ls $env:Wap_Project_Directory\$env:App_Packages_Directory\*\*${{ matrix.targetplatform }}.msixbundle)[0].FullName
          echo "App_Packages_Bundle_Path=$BundlePath" >> $env:GITHUB_ENV

      # Create the release:  https://github.com/actions/create-release
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref}}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: ${{ steps.nbgv.outputs.PublicRelease }}

      # Upload release asset:   https://github.com/actions/upload-release-asset
      - name: Update release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ env.App_Packages_Bundle_Path }}
          asset_name: ${{ env.App_Packages_Bundle }}
          asset_content_type: application/zip
